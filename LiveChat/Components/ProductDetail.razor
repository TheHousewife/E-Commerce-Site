@page "/product/{id:int}"
@using LiveChat.Data
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext Context
@inject NavigationManager NavManager
@inject CartService CartService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS

@if (_product != null)
{
    <div class="container mt-4">
        <div class="row">
            <div class="col-md-6 img-container">
                <img src="@_product.ImageUrl" alt="@_product.Name" class="img-fluid rounded shadow-sm h-100 w-100"/>
            </div>
            <div class="col-md-6">
                <h1 class="display-4">@_product.Name</h1>
                <p class="text-muted">@_product.Description</p>
                <p class="font-weight-bold text-success">Price: @_product.Price.ToString("C")</p>
                <div class="d-flex flex-row justify-content-center gap-3">
                    @if (isUserLoggedIn)
                    {
                        <button class="btn btn-primary" @onclick="() => AddToCart(_product)">Add to Cart</button>
                    }
                    else
                    {
                        <a href="Account/Login" class="btn btn-secondary">Login to Add</a>
                    }
                    <a href="Store" class="btn btn-secondary">Return to Store</a>
                </div>
            </div>
        </div>
    </div>

    <div class="toast-container position-fixed start-50 top-0 py-5">
        <div id="cartToast" class="toast align-items-center text-bg-success border-0" role="alert" aria-live="polite" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    Product added to cart!
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>

    <div class="container my-5">
        <h2 class="text-center mb-4">Featured Products</h2>
        <div class="row g-4">
            @foreach (var product in _products)
            {
                <div class="col-md-3">
                    <div class="card h-100 shadow-sm">
                        <img src="@product.ImageUrl" class="card-img-top" alt="@product.Name">
                        <div class="card-body">
                            <h5 class="card-title">@product.Name</h5>
                            <p class="card-text">@product.Price.ToString("C")</p>
                            <div class="d-flex justify-content-between align-items-center">
                                <a href="/product/@product.Id" class="btn btn-outline-primary btn-sm">View Details</a>
                                <div class="d-flex flex-row justify-content-center align-content-center ms-2">
                                    @if (isUserLoggedIn)
                                    {
                                        <button class="btn btn-primary btn-sm" @onclick="() => AddToCart(product)">Add to Cart</button>
                                    }
                                    else
                                    {
                                        <a href="javascript:void(0);" class="btn btn-secondary btn-sm" 
                                           @onclick="@(() => NavManager.NavigateTo("Account/Login", forceLoad: true))">
                                            Log in to add
                                        </a>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}
else
{
    <div class="alert alert-danger mt-4">
        <strong>Oops!</strong> This product is not available.
    </div>
}

<style>
    .container {
        max-width: 800px;
        background-color: #f9f9f9;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0px 4px 8px rgba(0,0,0,0.1);
    }

    .img-container {
        max-height: 300px;
        background-color: #FFF;
    }

    .img-fluid {
        border-radius: 10px;
        object-fit: contain;
    }

    .btn-primary {
        background-color: #007bff;
    }
</style>

@code {
    [Parameter] public int Id { get; set; }
    private Product _product;
    private List<Product> _products = new();
    private bool isUserLoggedIn;
    private string userId;

    protected override async Task OnParametersSetAsync()
    {
        _product = await Context.Products.FindAsync(Id);
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateProductsAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isUserLoggedIn = user.Identity.IsAuthenticated;
        if (isUserLoggedIn)
        {
            userId = user.Identity.Name;
        }

        _ = PeriodicallyUpdateProducts();
    }

    private async Task UpdateProductsAsync()
    {
        _products = await Context.Products
            .OrderBy(p => Guid.NewGuid())
            .Take(4)
            .ToListAsync();

        StateHasChanged();
    }

    private async Task PeriodicallyUpdateProducts()
    {
        while (true)
        {
            await Task.Delay(TimeSpan.FromMinutes(1));
            await UpdateProductsAsync();
        }
    }

    private async Task AddToCart(Product product)
    {
        if (!isUserLoggedIn) return;

        await CartService.AddToCartAsync(userId, product);
        await JS.InvokeVoidAsync("showCartToast");
    }
}
@page "/"
@using LiveChat.Data
@using Microsoft.EntityFrameworkCore
@inject CartService CartService
@inject ApplicationDbContext Context
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS

<PageTitle>Home</PageTitle>

<div class="container-fluid bg-light py-5 shadow-sm">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-md-6">
                <h1 class="display-4 fw-bold">Welcome to Our Store</h1>
                <p class="lead">Discover amazing products at great prices</p>
                <a href="Store" class="btn btn-primary btn-lg">Shop Now</a>
            </div>
            <div class="col-md-6">
                <img src="images/online-shopping-on-phone-buy-sell-business-digital-web-banner-application-money-advertising-payment-ecommerce-illustration-search-free-vector.jpg"
                     class="img-fluid rounded" alt="Store welcome image">
            </div>
        </div>
    </div>
</div>

<div id="heroCarousel" class="carousel slide mb-5 shadow-sm" data-bs-ride="carousel">
    <div class="carousel-inner">
        <div class="carousel-item active">
            <img src="https://marketplace.canva.com/EAE6uxzge6c/2/0/1600w/canva-yellow-and-white-minimalist-big-sale-banner-7-i89JholuQ.jpg"
                 class="d-block w-100" alt="Big Sale banner">
        </div>
        <div class="carousel-item">
            <img src="images/new-arrival.jpg" class="d-block w-100" alt="New Arrivals banner">
        </div>
        <div class="carousel-item">
            <img src="images/free-shipping.jpg" class="d-block w-100" alt="Free Shipping banner">
        </div>
    </div>
    <button class="carousel-control-prev" type="button" data-bs-target="#heroCarousel" data-bs-slide="prev">
        <div class="carousel-arrow-div">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        </div>
        <span class="visually-hidden">Previous</span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target="#heroCarousel" data-bs-slide="next">
        <div class="carousel-arrow-div">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
        </div>
        <span class="visually-hidden">Next</span>
    </button>
</div>

<div class="toast-container position-fixed start-50 top-0 py-5">
    <div id="cartToast" class="toast align-items-center text-bg-success border-0" role="alert" aria-live="polite" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                Product added to cart!
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>

<div class="container py-4 bg-light shadow-sm rounded">
    <div class="row text-center">
        <div class="col-md-4">
            <i class="bi bi-truck fs-1 text-primary"></i>
            <h5 class="mt-2">Free Shipping</h5>
            <p>Enjoy fast and free shipping on all orders.</p>
        </div>
        <div class="col-md-4">
            <i class="bi bi-shield-check fs-1 text-success"></i>
            <h5 class="mt-2">Secure Purchases</h5>
            <p>Your payment is safe with our encrypted checkout.</p>
        </div>
        <div class="col-md-4">
            <i class="bi bi-award fs-1 text-warning"></i>
            <h5 class="mt-2">Quality Guarantee</h5>
            <p>We stand by our products with a 100% quality assurance.</p>
        </div>
    </div>
</div>

<div class="container my-5">
    <h2 class="text-center mb-4">Featured products</h2>
    <div class="row g-4">
        @foreach (var product in _products)
        {
            <div class="col-md-3">
                <div class="card h-100 shadow-sm">
                    <img src="@product.ImageUrl" class="card-img-top" alt="@product.Name">
                    <div class="card-body">
                        <h5 class="card-title">@product.Name</h5>
                        <p class="card-text">@product.Price.ToString("C")</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <a href="/product/@product.Id" class="btn btn-outline-primary">View Details</a>
                            @if (isUserLoggedIn)
                            {
                                <button class="btn btn-primary" @onclick="() => AddToCart(product)">Add to Cart</button>
                            }
                            else
                            {
                                <a href="Account/Login" class="btn btn-secondary">Login to Add</a>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<div class="container-fluid bg-primary-subtle text-black py-4 my-5 rounded shadow-sm">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-md-8">
                <h3 class="mb-0"><i>Special Offer! Get 20% off on your first purchase</i></h3>
            </div>
            <div class="col-md-4 text-md-end">
                <a href="Store" class="btn btn-primary btn-lg">Shop Now</a>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Product> _products = new();
    private bool isUserLoggedIn;
    private string userId;

    protected override async Task OnInitializedAsync()
    {
        await UpdateProductsAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isUserLoggedIn = user.Identity.IsAuthenticated;
        if (isUserLoggedIn)
        {
            userId = user.Identity.Name;
        }

        _ = PeriodicallyUpdateProducts();
    }

    private async Task UpdateProductsAsync()
    {
        _products = await Context.Products
            .OrderBy(p => Guid.NewGuid())
            .Take(4)
            .ToListAsync();
        StateHasChanged();
    }

    private async Task PeriodicallyUpdateProducts()
    {
        while (true)
        {
            await Task.Delay(TimeSpan.FromMinutes(1));
            await UpdateProductsAsync();
        }
    }

    private async Task AddToCart(Product product)
    {
        if (!isUserLoggedIn) return;

        await CartService.AddToCartAsync(userId, product);
        await JS.InvokeVoidAsync("showCartToast");
    }
}